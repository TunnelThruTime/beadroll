.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "BEADROLL 1"
.TH BEADROLL 1 2023-12-24 "perl v5.38.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
beadroll \- create calendar files with multiple events
.SH SYNOPSIS
.IX Header "SYNOPSIS"
\&\fBbeadroll\fR [OPTIONS] ARGUMENTS
.SH DESCRIPTION
.IX Header "DESCRIPTION"
This section contains the detailed description of the command.
beadroll functions on the basis of adding events to a pickle file. The pickle file
then stores the events which you can modify using the `add` and `rm` subcommands.
.PP
beadroll's main subcommand, `add` has several options as well and these will need some
explanation.
.SH "example command"
.IX Header "example command"
.SH ADD
.IX Header "ADD"
\&\fBbeadroll add\fR [options] NAME BEGIN END
.PP
beadroll's add command is the motor behind the interface.
.SH ARGUMENTS
.IX Header "ARGUMENTS"
beadroll add command takes three args: NAME BEGIN END
.PP
The `name` is the name of the event that should be entered as a raw string literal.
the `begin`, and `end` keyword indicates the beginning, and ending time of the event. 
This can be entered using \fBISO 8601\fR formatting.
An example would be \fB"2024\-06\-18T12:00:00\-04:00"\fR.
.PP
The time date format "2024\-06\-18T12:00:00\-04:00" follows the ISO 8601 standard for representing date and time information.
.SH "Breaking it down, formatting for the BEGIN and END timestamp:"
.IX Header "Breaking it down, formatting for the BEGIN and END timestamp:"
\&\- "2024\-06\-18" represents the date in the format of year-month-day.
\&\- "T" separates the date from the time.
\&\- "12:00:00" represents the time in the format of hour:minute:second.
\&\- "\-04:00" represents the time zone offset, with "\-04:00" indicating a 4\-hour offset behind Coordinated Universal Time (UTC).
.PP
So, in this example, the date is June 18, 2024, and the time is 12:00:00 local time, with a time zone offset of \-04:00.
.PP
It should be noted that beadroll does not correct errors in events that you create. This means that
if you create an event that ends before it begins beadroll will generate the ICS file without complaint
and only when you import that file into a calendar application will you get a error.
.SH OPTIONS
.IX Header "OPTIONS"
This section describes the available options for the `add` command.
.PP
As of version 0.0.1 these features are in development and only one is 
of attention.
.IP \fB\-\-alarms\fR 4
.IX Item "--alarms"
the option takes a string literal from the command line in the form of:
\&\-\-alarms="<string\-literal>"
.Sp
the string takes multiple alarms, each delimited by the keyword `alarm` and
given a special heading. Note that heading cannot be reused. So that each
heading needs a special name. `\-\-alarms="alarm=tower bell, trigger=\-1m, summary=chimes the hour, tower bell, trigger=\-1m, summary=chimes the hour" should only produce one alarm.
.IP \fB\-\-option2\fR 4
.IX Item "--option2"
Description of option 2.
.SH "CROP \fBbeadroll crop\fP [OPTIONS] [POINTER]..."
.IX Header "CROP beadroll crop [OPTIONS] [POINTER]..."
The crop tool does what you might expect from a crop tool, it trims the edges.
crop does this by trimming out everything that isn't selected. Therefore if
we had the characters composing the word \fIargument\fR and we wanted to keep 
the characters 2, 3, and 4, we could use '2:4' as the pointer argument.
This would select the word \fIgum\fR and crop what wasn't selected.
.PP
Currently the crop tool, or command, is the only functional tool in removing items
from the database, as of such, please refer to the \fIrm\fR section for instructions on
the \fIpointer\fR argument that is the supply to the modification commands, i.e., \fIrm\fR, 
and \fIcrop\fR.
.IP \fB\-\-dry\fR 4
.IX Item "--dry"
use the dry option to have the program stop before altering the database and print out
the alterations that would take place. In the execution of the crop tool, the dry option
prints out the items within that database that would be keep after the croping.
.SH "RM \fBbeadroll rm\fP [OPTIONS] [POINTER]..."
.IX Header "RM beadroll rm [OPTIONS] [POINTER]..."
the remove command is meant to make editing the pickle database feasible, 
although in it's current formation not convenient. To understand the remove
command we have to look at the keyword `pointer`, which is a representation of the 
first argument given to the command.
.PP
beadroll takes the first argument and removes the item from the database's list that 
corresponds to the item. One interesting feature of the `pointer` argument is it's ability
to be used as a slicer. I followed the model of python's slicing for this, and because it
is fairly complicated I'll provide an explanation.
.PP
beadroll's remove command works by removing items from the database. These items are
in turned numerically indexed allowing the user to remove them by using there indexed numbers.
.PP
now consider the word \fI'surcharge'\fR. it's an eight letter word and by definition, if we begin indexing
at zero, the last index should be seven. Slicing works by placing a colon before or after a number to
include each ordinal coming up to, and including, the number, if the colon is placed before, or each ordinal leading away
from the number. In this way ':3' would give us the word \fI'sur'\fR, while '3:' would give us \fI'charge'\fR.
.IP \fB\-\-dry\fR 4
.IX Item "--dry"
exits after displaying what the database should look like
.SH EXAMPLES
.IX Header "EXAMPLES"
This section contains code examples demonstrating usage of the command.
.SH "DEVELOPER NOTES"
.IX Header "DEVELOPER NOTES"
Currently this entire project was written in python, but the backend of the project's persistence is dependent on pickle.
For that reason this section will detail the pickle problem, which itself is a method of \fIobject serialization\fR. Inspection of 
the \fIcontainer\fR that is frequently used throughout the source indicate the method used in storing data is first the dictionary.
.PP
In the container's dictionary there are two keys, \fIevents\fR, and \fIalarms\fR. The manipulation of these two dictionary values is 
crucial to the manipulation of beadroll's source coding.
.SH "EventManager class"
.IX Header "EventManager class"
The event manager class plays a key role in the functionality of the beadroll command line interface.
Below I've listed the various functions that I've put into the EventManager to make it function the way
that it does. I hope that they are helpful, and at the very least I know that this documentation will be
helpful to me in the future.
.IP save_to_pickle 4
.IX Item "save_to_pickle"
Immediately viewing the source code that follows the initialization of the \fIEventManager\fR class it is obvious the
code surrounding the \fIsave_to_pickle\fR is meant to correct errors within the pickle's hierchary.
As mentioned above the hierchary of the pickle data is of utmost importance. Both \fIevents\fR and \fIalarms\fR must be 
lists if the structure of the hierchary is to remain foundational. These two lists must be in a dictionary, and the
dictionary must be saved in the pickle database file.
.Sp
beadroll is git version maintained, and so as of version 0.0.1, the first version, there are 7 if, and else if statements
within the \fIsave_to_pickle\fR function. These if statments monitor three factors to channel the flow of the coding.
There are (1.), which datatype (list, or str) the container['events'] is, (2.), which datatype the input data is, and (3.),
whether or not the \fIEventManager.save_to_pickle\fR will be set to \fIdestructive\fR.
.Sp
For the first four instances of if statements within the \fIsave_to_pickle\fR function deal with soft saving, or perserving
the data while appending new items to it. The statements in this segments check all three variables before doing anything.
When writing the code for the destructive cases in the \fIsave_to_pickle\fR all that seemed to go out the door.
For the if statements associated with overwriting the data in the container events there is only two factors which determine
the workflow. These are the input datatype, and the destructive boolean.
.Sp
The coding for the destructive segments, that is the last two is fundamentally different. The operate on the principle that
if the incoming data is of the datatype list then the data is saved, overwriting the contents of the key value pair 'events'.
However is the datatype of the including data is not a list, the coding is written to place it within a list before saving,
and overwritting the data within the key value pair 'events'.
.Sp
But before I get into that I will have to detail some other quirks about the \fIsave_to_pickle\fR function.
.SH "REMOVING ITEMS FROM THE CONTAINER EVENTS"
.IX Header "REMOVING ITEMS FROM THE CONTAINER EVENTS"
removing events from the container events is one of the key functionalities of the program, however there are some significant
quirks that need to be addressed in terms of the utilitization of this feature.
.PP
Currently, as of version 0.0.1, when items are removed from the list the list is disolve itself once there is only one
item within the list. This was the initial reason that prompted me to develop the \fIsave_to_pickle\fR if statements detailed
in the previous segment. In fact it is so pervasive in looking over the coding that you could say the ENTIRE reason that
the if statements were written was to manage workflow events that rebuild the list once the list dissolves.
.PP
However it is clear this is cause significant problems for the structure of the device. Every function that deals with the
database will have to encounter this problem and come up with solutions for it. Furthermore it doesn't seem that other
lists within the python environment behaviour anything like this.
.SH "structuralisation of subcommands"
.IX Header "structuralisation of subcommands"
The \fIadd\fR, \fIrm\fR, and \fIcrop\fR subcommands all access the database through the use of the \fIsave_to_pickle\fR to ensure their
ability to manipulate that database. This is part of the reason why, in version 0.0.1, there are 7 if statements. The last
two if statements are never, as far as I can tell, actually utilized by the \fIadd\fR command, but are exclusive to the \fIcrop\fR and 
\&\fIrm\fR commands.
.SH "STRUCTURE OF THE DATASET: VOODOO CONCERNING THE FRACTUALS"
.IX Header "STRUCTURE OF THE DATASET: VOODOO CONCERNING THE FRACTUALS"
there is an aspect of beadroll that is ultra reality. By this I'm sure you're thinking outside of your head, but really it is
much more common place. As I've noted above there are several 'if statements' that connect the base functionality of the utility.
This base is severely compromised when it comes to removing items from the container events.
.PP
The reason for this seems to lie in the way the code saves a version of itself before placing it again in the container events.
This has the surreal effect of seemingly making fractual copies of itself each down one layer of the container events.
.PP
The source is capable of rebounding from a str to a list when the list dissolves but when I went to attach the removal of items
from the list onto the base of the several if statements I fumbled in the untangling of options that were available.
.PP
One of the curious things about the use of the \fIsave_to_pickle\fR 'if statements' is the two concerning the \fIdestructive\fR parameter.
Neither one concerns itself with the nature of the container events. The idea behind this was that since they would be overwriting 
the container events they shouldn't concern themselves with it, but in practice when you run them they fratualize the contents of the
container in a recursive manner. Again this is only in version 0.0.1, and if I don't update the man pages here the reader should consult
the version as read from \fIgit log\fR.
.PP
After reviewing the subcommands \fIrm\fR, and \fIcrop\fR, I realized that the reason that the overwritten dataset was producing fractuals 
had to do with the way in which the container events was being saved. In the lines the container events was being saved after being
altered by the subcommands, usually with a loop, and then saved back to a separate variable that represented the uppermost level of the
hierchary. If you recall, the hierchary of the dataset is initially a dictionary and then two key pairs each containing a list datatypes.
For this reason the lists themselves are a sort of secondary level in the datastructure, where the uppermost level is the dictionary.
.PP
What was occuring was that a line which instructed the python to overwrite the secondary structure was overwriting it with the uppermost
level of the hierchary, thereby recursively nesting the structure within itself.
.PP
Since programming occurs most frequently within a sort of black box it is difficult to spot these types of anomlies and they cause a lot
of confusion, but it should be noted that the layout of the structure is fundamental to a functional command line utility.
You can of course always check the nature of your structure with the subcommand \fIshow\fR and get consistent results.
.SH "TUVING THE MACHINE: RM , CROP Commands"
.IX Header "TUVING THE MACHINE: RM , CROP Commands"
rm and crop commands work in different manners. The crop command will save what you have selected using the pythonic slicing
described above. The rm command by contrast will discard what you have selected by splicing.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
List any related man pages or external resources here.
.SH AUTHOR
.IX Header "AUTHOR"
Luew Lemminkainen 
<github.com/tunnelthrutime>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Specify the copyright notice and license information for the command.
